Figura 4 – Arquitectura Funcional: Componentes Principales del DTO Middleware
-------------------------------------------------------------------------------

Descripción general
--------------------
La presente imagen introduce la arquitectura funcional del DTO Middleware, mostrando cómo sus tres componentes principales —DTO Generator, Event Generator y Conciliator— interactúan entre sí, con los sistemas fuente, y con los consumidores finales como APIs u otros sistemas.

El enfoque gira en torno a una plataforma modular que permite la generación, actualización y entrega de objetos de datos (DTOs) a partir de eventos técnicos provenientes de múltiples orígenes, como bases de datos (por CDC o queries directas) o eventos generados por sistemas operativos internos.

Este middleware está diseñado para ser el punto central de consolidación y entrega de información del cliente, como CustomerPosition o CustomerProfile, pero también es extensible a cualquier otro DTO definido bajo modelos BIAN o necesidades específicas del banco.

Principales aportaciones funcionales
-------------------------------------
1. DTO Generator:
   - Responsable de consumir eventos y componer DTOs completos y consistentes.
   - Permite integraciones con subcomponentes como Balances o Fallback si aplica.
   - Realiza la escritura de DTOs en dos repositorios desacoplados:
     • Primary Storage: base de datos de acceso rápido, consultada prioritariamente por los consumidores.
     • Secondary Storage: base de datos persistente para respaldo y recuperación ante fallas.

2. Event Generator:
   - Componente transversal que permite generar nuevos eventos basados en eventos ya consumidos.
   - Sirve como puente de comunicación entre DTO Generator y Conciliator.
   - Es el único responsable de emitir eventos hacia el event broker, ya sean de actualización, conciliación o fallas.

3. Conciliator:
   - Encargado de resolver fallas en la generación de DTOs mediante consultas near-real-time a fuentes operativas.
   - Implementa lógica de retries inmediatos (NRT) y, si falla, planifica conciliaciones diferidas (async fallback).
   - Informa mediante eventos al DTO Generator cuando ha logrado conciliar información.

Consideraciones clave
----------------------
- Repositorio primario vs secundario: Todos los DTOs se almacenan por defecto en un almacenamiento de rápido acceso, el cual funge como la fuente principal de lectura para las APIs. El almacenamiento persistente sirve como respaldo e historial.

- Circuit Breaker en consumidores: Los sistemas consumidores deben implementar mecanismos de fallback (circuit breaker), consultando primero al repositorio primario y, si este falla, haciendo una consulta al repositorio persistente.

- Fallback opcional: Se mantiene la posibilidad de una orquestación “AS-IS” como fallback extremo si todo falla.

- Backpressure: La plataforma incorpora control de backpressure para consolidar eventos por cliente, permitiendo eficiencia en entornos de alta concurrencia.

- Extendibilidad: Aunque esta figura presenta la arquitectura con enfoque a CustomerPosition, es aplicable para cualquier otro DTO como CustomerProfile.

Diagramas de Secuencia
=======================

Diagrama 1: Captura de eventos y generación del DTO
----------------------------------------------------
```mermaid
sequenceDiagram
    participant DataSources
    participant EventBroker
    participant EventConsumer
    participant DTOGenerator
    participant EventGenerator
    participant PrimaryDB
    participant SecondaryDB

    DataSources->>EventBroker: Send multiple events
    EventBroker->>EventConsumer: Pull events
    EventConsumer->>DTOGenerator: Dispatch events
    DTOGenerator->>DTOGenerator: Aggregate & Compose DTO
    DTOGenerator->>PrimaryDB: Write DTO to fast-access storage
    DTOGenerator->>SecondaryDB: Write DTO to persistent storage
    DTOGenerator->>EventGenerator: Emit "DTO updated" event
```

Diagrama 2: Fallback a Conciliator tras fallo en generación del DTO
--------------------------------------------------------------------
```mermaid
sequenceDiagram
    participant EventBroker
    participant EventConsumer
    participant DTOGenerator
    participant EventGenerator
    participant Conciliator
    participant DataSources

    DTOGenerator->>EventGenerator: Emit "DTO generation failed"
    EventGenerator->>EventBroker: Push event
    EventBroker->>EventConsumer: Pull failed event
    EventConsumer->>Conciliator: Forward to conciliator
    Conciliator->>DataSources: Fallback query to resolve
    Conciliator->>EventGenerator: Emit "conciliated event"
    EventGenerator->>DTOGenerator: Push conciliated event
    DTOGenerator->>PrimaryDB: Write updated DTO
    DTOGenerator->>SecondaryDB: Write updated DTO
```

Diagrama 3: Circuit Breaker aplicado por consumidores
------------------------------------------------------
```mermaid
sequenceDiagram
    participant APIClient
    participant APILayer
    participant CacheL1
    participant StorageDB

    APIClient->>APILayer: Request DTO
    APILayer->>CacheL1: Try fetch from fast-access storage
    alt Cache Miss
        APILayer->>StorageDB: Fallback to persistent storage
        StorageDB-->>APILayer: Return DTO
    end
    alt CircuitBreaker Open
        APIClient->>APILayer: Request blocked
    end
```