
FIGURA 6 – DETALLE FUNCIONAL DEL COMPONENTE CONCILIATOR

DESCRIPCIÓN GENERAL
-------------------
Esta figura muestra el detalle funcional del componente “Conciliator” dentro de la plataforma DTO Middleware. 
El Conciliator es responsable de manejar todos los escenarios de recuperación cuando fallan los intentos iniciales de generación de DTOs, ya sea por errores en los datos recibidos, inconsistencias en los sistemas fuente o fallas técnicas.

FUNCIONES PRINCIPALES
---------------------
1. **Recepción de eventos fallidos**: Cuando el DTO Generator no puede generar o actualizar un DTO, envía un evento de tipo "Failed Event" mediante el Event Generator. Este evento es capturado por el Event Consumer, quien lo enruta al subcomponente Conciliator.
2. **Consultas NRT (Near-Real Time)**: El Conciliator intenta resolver la inconsistencia lo antes posible mediante una consulta directa al sistema fuente. Este intento es inmediato para lograr reconciliaciones sin demoras perceptibles.
3. **Manejo de reintentos asincrónicos**: Si el intento NRT falla, se planifican reintentos posteriores de manera asincrónica. Esto permite configurar ventanas de reintento, evitando una saturación innecesaria de los sistemas fuente.
4. **Generación de eventos conciliatorios**: Si el Conciliator logra resolver la inconsistencia, genera un nuevo evento conciliatorio que se publica nuevamente en el Event Broker. Este evento es procesado por el DTO Generator para actualizar el DTO correspondiente.
5. **Trazabilidad**: Todos los intentos (NRT y asincrónicos) son registrados para fines de auditoría y seguimiento.

CONDICIONES ESPECIALES
-----------------------
- El Conciliator puede consultar directamente a los sistemas fuente (ej. bases de datos DB2, Oracle u otros) utilizando paths ya validados operativa o contablemente.
- En escenarios donde el Conciliator no logre resolver, se puede generar un evento que marque el DTO como “inconsistente” para alertar a los consumidores.
- La lógica de backpressure puede ser aplicada también a eventos fallidos para evitar reintentos excesivos.

DIAGRAMAS DE SECUENCIA EN MERMAID
---------------------------------

```mermaid
sequenceDiagram
    participant DTO_Generator
    participant Event_Generator
    participant Event_Broker
    participant Event_Consumer
    participant Conciliator
    participant DataSource

    DTO_Generator->>Event_Generator: send FailedEvent
    Event_Generator->>Event_Broker: push FailedEvent
    Event_Consumer->>Event_Broker: pull FailedEvent
    Event_Broker-->>Event_Consumer: FailedEvent
    Event_Consumer->>Conciliator: route FailedEvent
    Conciliator->>DataSource: query data (NRT)
    alt Successful resolution
        Conciliator->>Event_Generator: send conciliatory event
        Event_Generator->>Event_Broker: push conciliatory event
    else NRT failed
        Conciliator->>Conciliator: schedule async retries
        loop Retry attempts
            Conciliator->>DataSource: retry query
        end
        alt Eventually resolved
            Conciliator->>Event_Generator: send conciliatory event
        else Not resolved
            Conciliator->>Event_Generator: send unresolved marker
        end
    end
```
