
Figura 4 – Arquitectura Funcional General del Middleware de DTOs

Descripción general

La presente figura introduce la arquitectura funcional de alto nivel del DTO Middleware. Este middleware actúa como una plataforma intermedia y desacoplada entre las fuentes de datos de sistemas core y los consumidores finales de información, los cuales pueden ser APIs, sistemas internos u otras plataformas digitales.

El diseño gira en torno a tres componentes funcionales principales:

1. DTO Generator: Responsable de recibir eventos desde el broker de eventos, componer objetos de datos (DTOs) a partir de esos eventos y almacenarlos en repositorios internos.
2. Event Generator: Gestiona la publicación de eventos nuevos o actualizados, así como la comunicación entre componentes internos (como conciliador y generador de DTOs).
3. Conciliator: Encargado de resolver eventos que fallaron durante el proceso de generación de DTOs, ya sea en línea (NRT) o mediante reintentos asincrónicos.

Estos componentes se integran con dos tipos de almacenamiento:
- Almacenamiento primario (Primary Storage): Una base de datos de acceso rápido (por ejemplo, Redis JSON), pensada como el primer punto de acceso para los consumidores.
- Almacenamiento secundario (Secondary Storage): Un repositorio persistente que asegura la integridad y consistencia de los objetos DTO.

En el lado del consumidor, se ilustra la interacción de las APIs implementadas sobre la plataforma, que acceden primero a través del almacenamiento primario. En caso de falla, un mecanismo de circuit breaker activa consultas hacia el repositorio secundario, con estados de control como cerrado, semiabierto y abierto para manejar la disponibilidad.

De manera opcional, se mantiene un fallback directo hacia los sistemas fuente bajo el modelo tradicional de orquestación AS-IS. Sin embargo, el objetivo es que este camino sea evitado en entornos productivos estables.

Principales aportaciones del modelo

- Centraliza la generación de objetos DTO desde eventos técnicos, eliminando orquestaciones redundantes en APIs.
- Separa responsabilidades entre generación, publicación y conciliación de datos.
- Mejora los tiempos de respuesta al disponibilizar datos desde una base de acceso rápido.
- Permite desacoplar consumidores mediante mecanismos de circuit breaker, aumentando la resiliencia general.
- Facilita el trazado y monitoreo de fallas e inconsistencias gracias al flujo de eventos estandarizados.

Consideraciones clave

- El DTO Middleware es agnóstico al consumidor: no requiere que quien lo consuma sea una API.
- Los mecanismos de fallback hacia los sistemas fuente se mantienen opcionales, y su uso dependerá del contexto de criticidad o inconsistencia del DTO.
- Cada componente puede operar y escalar de forma independiente.
- La plataforma permite aprovechar los eventos existentes para generar nuevos eventos significativos, por ejemplo, cuando un CustomerPosition es actualizado.

Diagramas de secuencia

Diagrama 4.1 – Generación de DTOs desde eventos técnicos

```mermaid
sequenceDiagram
    participant DataSource
    participant EventBroker
    participant EventConsumer
    participant DTO Generator
    participant Storage Primary
    participant Storage Secondary

    DataSource->>EventBroker: Send event
    EventBroker->>EventConsumer: Pull events
    EventConsumer->>DTO Generator: Dispatch event
    DTO Generator->>Storage Primary: Save DTO (fast-access)
    DTO Generator->>Storage Secondary: Save DTO (persistent)
```

Diagrama 4.2 – Manejo de fallos y conciliación de datos

```mermaid
sequenceDiagram
    participant DTO Generator
    participant Event Generator
    participant EventBroker
    participant EventConsumer
    participant Conciliator
    participant DataSource
    participant DTO Composer

    DTO Generator->>Event Generator: Send failed-event
    Event Generator->>EventBroker: Push event (conciliator event)
    EventBroker->>EventConsumer: Pull conciliator event
    EventConsumer->>Conciliator: Dispatch event
    Conciliator->>DataSource: Retrieve missing data (N retries)
    Conciliator->>Event Generator: Send resolved event
    Event Generator->>DTO Composer: Push resolved event
```

Diagrama 4.3 – Comportamiento de Circuit Breaker en consumidores

```mermaid
sequenceDiagram
    participant API Client
    participant CircuitBreaker
    participant CacheL1
    participant Storage Secondary

    API Client->>CircuitBreaker: Request DTO
    alt Circuit closed
        CircuitBreaker->>CacheL1: Query DTO
    else Circuit semi-open
        CircuitBreaker->>CacheL1: Query DTO
        alt Success
            CircuitBreaker->>API Client: Return DTO
        else Failure
            CircuitBreaker->>Storage Secondary: Fallback Query
    else Circuit open
        CircuitBreaker->>Storage Secondary: Query DTO
    end
```
