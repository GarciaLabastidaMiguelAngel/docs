
# Figura 2 – Contexto: Solución Propuesta (Modelo Centralizado de DTOs BIAN)

## Descripción General
Esta imagen representa una propuesta de solución ante los problemas de orquestación y acoplamiento mostrados en la figura anterior. El enfoque radica en consolidar un modelo unificado de información del cliente en un único repositorio estructurado bajo el estándar BIAN. Este repositorio almacena objetos de datos (DTOs) que permiten centralizar la información de cuentas, tarjetas, seguros e inversiones, facilitando la consulta eficiente por parte de distintos sistemas.

Aunque la imagen ejemplifica la construcción de un modelo Customer Position BIAN, esta arquitectura de referencia es totalmente extensible y desacoplada, permitiendo generar cualquier tipo de DTOs como Customer Profile o representaciones específicas de Service Domains, según lo requiera el contexto funcional.

## Principales Aportaciones
- **Desacoplamiento técnico y organizacional**: Al tener los datos agregados y consolidados en un objeto BIAN, se evita la dependencia directa de múltiples fuentes.
- **Modelo extensible**: Si bien Customer Position es el ejemplo representado, la base de datos puede contener múltiples modelos BIAN coexistiendo.
- **Interoperabilidad y agregación**: Se habilita la interoperabilidad entre APIs y otros sistemas mediante acceso directo a los datos ya proyectados, sin necesidad de replicar orquestaciones.
- **Optimización de fallback**: Las APIs pueden implementar lógica de fallback para consultas que no se encuentren en el modelo principal, permitiendo alta disponibilidad de información.
- **Soporte multicanal**: Tanto canales digitales como sistemas internos pueden aprovechar el modelo central sin construir orquestaciones propias.

## Consideraciones
- La lógica de agregación inicial de datos desde los sistemas core debe mantenerse robusta, ya que es la base para que los DTOs sean confiables.
- La relación entre las APIs (por ejemplo, API-1 y API-2) y los DTOs puede configurarse para responder a diferentes políticas de negocio, como fallback, privacidad de datos o perfiles de acceso.
- Es importante mantener actualizados los modelos según evolucione la estructura del core bancario o los requerimientos funcionales.
